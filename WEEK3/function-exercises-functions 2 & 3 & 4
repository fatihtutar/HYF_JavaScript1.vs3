Turtle Shuffle

some trickier function exercises before moving on.

    Reading function behavior, and using them correctly
    Defining vs. Calling functions
        Defining: when you write the funciton -> function name() {}. This creates the function in memory
        Calling: using the function to compute new values -> name(). This creates a new frame and returns a new value
    Arguments
    Lexical Scope
    Return Values

Index

    completed example
    exercises
        number 1
        number 2
        number 3

        number 4
        number 5
        number 6
        number 7
        number 8
        number 9

Completed Example

on pytut

{ // completed example
  function turtle(_1, _2, _3) { 
    var result = "";
    var the_rest = "tle";
    result = _1 + _2 + _3 + the_rest;
    return result;
  }
  const return_val = turtle("t", "u", "r");
  console.assert(return_val === 'turtle', "example: return_val === " + return_val);
};

Exercises
1

on pytut

{  // 1
  function turtle(_1, _2, _3) {  
    var result = "";
    var the_start = "tur";
    result = the_start + _1 + _2 + _3;


    return result;
  }
  const return_val = turtle(/* write some arguments */);
  console.assert(return_val === 'turtle', "1: return_val === " + return_val);
};

2

on pytut

{  // 2
  function turtle(_1, _2) {  
    var result = "";
    var the_start = "tu";
    var the_end = "le";
    result = the_start + _1 + _2 + the_end;
    return result;
  }
  const return_val = turtle(/* write some arguments */);
  console.assert(return_val === 'turtle', "2: return_val === " + return_val);
};

3

on pytut

{  // 3
  function turtle(_1, _2) {  
    var result = "t" + _1 + "r" + _2;
    return result;
  }
  const return_val = turtle(/* write some arguments */);
  console.assert(return_val === 'turtle', "3: return_val === " + return_val);
};

4

on pytut

{  // 4
  function turtle(_1, _2, _3) {  
    var result = "t" + _2 + "r" + _1 + _3;
    return result;
  }
  const return_val_1 = turtle(/* write some arguments */);
  console.assert(return_val_1 === 'turtle', "5: return_val_1 === " + return_val_1);

  const return_val_2 = turtle(/* write some arguments */);
  console.assert(return_val_2 === 'turtle', "4: return_val_2 === " + return_val_2);
};

5

on pytut

{  // 5
  function turtle(_1, _2, _3) {  
    var result = _1 + _2 + _3;
    return result;
  }
  const return_val_1 = turtle(/* write some arguments */);
  console.assert(return_val_1 === 'turtle', "5: return_val_1 === " + return_val_1);

  const return_val_2 = turtle(/* write some arguments */);
  console.assert(return_val_2 === 'turtle', "5: return_val_2 === " + return_val_2);

  const return_val_3 = turtle(/* write some arguments */);
  console.assert(return_val_3 === 'turtle', "5: return_val_3 === " + return_val_3);

  const return_val_4 = turtle(/* write some arguments */);
  console.assert(return_val_4 === 'turtle', "5: return_val_4 === " + return_val_4);

  const return_val_5 = turtle(/* write some arguments */);
  console.assert(return_val_5 === 'turtle', "5: return_val_5 === " + return_val_5);

  const return_val_6 = turtle(/* write some arguments */);
  console.assert(return_val_6 === 'turtle', "5: return_val_6 === " + return_val_6);
};

6

on pytut

{ // 6
  function turtle(_1, _2, _3, _4, _5) {  
    var result = _4 + _2 + _5 + _4 + _1 + _3;
    return result;
  }
  const return_val = turtle(/* write some arguments */);
  console.assert(return_val === 'turtle', "6: return_val === " + return_val);
};

7

on pytut

{ // 7
  function turtle(_1, _2, _3, _4, _5) {  
    var result = _2 + _1 + _4 + _2 + "l" + _3;
    return result;
  }


  const return_val = turtle(/* write some arguments */);
  console.assert(return_val === 'turtle', "7: return_val === " + return_val);
};

8

on pytut

{ // 8
  function turtle(_1, _2, _3, _4, _5) {  
    _4 = _2;
    _1 = _3;
    var result = _4 + "u" + _1 + _4 + _5 + "e";
    return result;
  }
  const return_val = turtle(/* write some arguments */);
  console.assert(return_val === 'turtle', "8: return_val === " + return_val);
};

9

on pytut

{ // 9
  function turtle(_1, _2, _3, _4, _5) {  
    var _ = _4;
    _4 = _2;
    _1 = _3;
    _3 = _;
    var result = _4 + "u" + _1 + _4 + _3 + "e";
    return result;
  }
  const return_val = turtle(/* write some arguments */);
  console.assert(return_val === 'turtle', "9: return_val === " + return_val);
};

